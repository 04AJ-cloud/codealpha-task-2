#include <iostream>
#include <string>
#include <vector>

using namespace std;

class Task {
private:
    string name;
    string description;
    string dueDate;
    bool completed;

public:
    Task(const string& name, const string& description, const string& dueDate)
        : name(name), description(description), dueDate(dueDate), completed(false) {}

    string getName() const { return name; }
    string getDescription() const { return description; }
    string getDueDate() const { return dueDate; }
    bool isCompleted() const { return completed; }

    void setName(const string& name) { this->name = name; }
    void setDescription(const string& description) { this->description = description; }
    void setDueDate(const string& dueDate) { this->dueDate = dueDate; }
    void markCompleted() { completed = true; }

    void displayTask() const {
        cout << name << " (" << (completed ? "Completed" : "Pending") << ") - Due: " << dueDate << endl
             << " Description: " << description << endl;
    }
};

class ToDoList {
private:
    vector<Task> tasks;

public:
    void displayMenu() {
        cout << "\n---------- To-Do List Menu -----------\n";
        cout << "1. Add Task\n";
        cout << "2. Delete Task\n";
        cout << "3. Display Tasks\n";
        cout << "4. Mark Task as Completed\n";
        cout << "5. Edit Task\n";
        cout << "6. Exit\n";
        cout << "-----------------------------------------\n";
    }

    void addTask() {
        string name, description, dueDate;
        cin.ignore();
        cout << "Enter task name: ";
        getline(cin, name);
        cout << "Enter task description: ";
        getline(cin, description);
        cout << "Enter task due date (YYYY-MM-DD): ";
        getline(cin, dueDate);

        tasks.emplace_back(name, description, dueDate);
        cout << "Task added successfully!\n";
    }

    void deleteTask() {
        if (tasks.empty()) {
            cout << "No tasks to delete!\n";
            return;
        }
        displayTaskList();
        cout << "Enter the task number to delete: ";
        int taskNumber;
        cin >> taskNumber;
        if (taskNumber >= 1 && taskNumber <= (int)tasks.size()) {
            tasks.erase(tasks.begin() + taskNumber - 1);
            cout << "Task deleted successfully!\n";
        } else {
            cout << "Invalid task number!\n";
        }
    }

    void displayTasks() {
        if (tasks.empty()) {
            cout << "No tasks to display!\n";
            return;
        }
        cout << "Tasks:\n";
        for (int i = 0; i < (int)tasks.size(); ++i) {
            cout << i + 1 << ". ";
            tasks[i].displayTask();
        }
    }

    void markTaskCompleted() {
        if (tasks.empty()) {
            cout << "No tasks to mark as completed!\n";
            return;
        }
        displayTaskList();
        cout << "Enter the task number to mark as completed: ";
        int taskNumber;
        cin >> taskNumber;
        if (taskNumber >= 1 && taskNumber <= (int)tasks.size()) {
            tasks[taskNumber - 1].markCompleted();
            cout << "Task marked as completed!\n";
        } else {
            cout << "Invalid task number!\n";
        }
    }

    void editTask() {
        if (tasks.empty()) {
            cout << "No tasks to edit!\n";
            return;
        }
        displayTaskList();
        cout << "Enter the task number to edit: ";
        int taskNumber;
        cin >> taskNumber;
        cin.ignore();

        if (taskNumber >= 1 && taskNumber <= (int)tasks.size()) {
            Task& task = tasks[taskNumber - 1];
            string name, description, dueDate;

            cout << "Enter new task name (current: " << task.getName() << "): ";
            getline(cin, name);
            cout << "Enter new task description (current: " << task.getDescription() << "): ";
            getline(cin, description);
            cout << "Enter new task due date (current: " << task.getDueDate() << "): ";
            getline(cin, dueDate);

            task.setName(name);
            task.setDescription(description);
            task.setDueDate(dueDate);

            cout << "Task updated successfully!\n";
        } else {
            cout << "Invalid task number!\n";
        }
    }

    void displayTaskList() {
        cout << "Tasks:\n";
        for (int i = 0; i < (int)tasks.size(); ++i) {
            cout << i + 1 << ". " << tasks[i].getName() << endl;
        }
    }

    void run() {
        int choice;
        do {
            displayMenu();
            cout << "Enter your choice: ";
            cin >> choice;

            switch (choice) {
                case 1: addTask(); break;
                case 2: deleteTask(); break;
                case 3: displayTasks(); break;
                case 4: markTaskCompleted(); break;
                case 5: editTask(); break;
                case 6: cout << "Exiting program. Bye!\n"; break;
                default: cout << "Invalid choice. Please try again!\n"; break;
            }
        } while (choice != 6);
    }
};

int main() {
    ToDoList toDoList;
    toDoList.run();
    return 0;
}
